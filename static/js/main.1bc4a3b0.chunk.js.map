{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","key","base","App","_useState","useState","_useState2","Object","slicedToArray","query","setQuery","_useState3","_useState4","weather","setWeather","fahrenheit","Math","round","main","temp","react_default","a","createElement","className","type","placeholder","onChange","e","target","value","onKeyPress","evt","fetch","concat","then","res","json","result","name","sys","country","d","day","getDay","month","getDate","getMonth","year","getFullYear","dateBuilder","Date","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"wKAEMA,EAAM,CACVC,IAAK,mCACLC,KAAM,4CAiEOC,MA9Df,WAAe,IAAAC,EACaC,mBAAS,IADtBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GACCI,EADDJ,EAAA,GAAAK,EAEiBN,mBAAS,IAF1BO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAENE,EAFMD,EAAA,GAEGE,EAFHF,EAAA,GA2BTG,EAAaC,KAAKC,MAA2B,IAApBJ,EAAQK,KAAKC,KAAc,IAExD,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAmC,oBAAhBV,EAAQK,MAAyBL,EAAQK,KAAKC,KAAO,GAAM,WAAsB,OACvGC,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SACEE,KAAK,OACLD,UAAU,aACVE,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAIjB,EAASiB,EAAEC,OAAOC,QACjCA,MAAOpB,EACPqB,WAnCK,SAAAC,GACG,UAAZA,EAAI9B,KACN+B,MAAK,GAAAC,OAAIjC,EAAIE,KAAR,cAAA+B,OAAyBxB,EAAzB,wBAAAwB,OAAqDjC,EAAIC,MAC3DiC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GACJvB,EAAWuB,GACX3B,EAAS,UAiCc,oBAAhBG,EAAQK,KACfE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYV,EAAQyB,KAAnC,KAA2CzB,EAAQ0B,IAAIC,SACvDpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAhCP,SAACkB,GACnB,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UAEbC,GADOH,EAAEI,UAJA,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGJ,EAAEK,aACjBC,EAAON,EAAEO,cAEb,SAAAf,OAAUS,EAAV,MAAAT,OAAkBW,EAAlB,KAAAX,OAA2BS,EAA3B,MAAAT,OAAmCc,GAuBFE,CAAY,IAAIC,QAGzC9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQR,EAAvB,SACAK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWV,EAAQA,QAAQ,GAAGK,QAG9C,MClDEiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAA3B,EAAA,GAAAO,KAAAoB,EAAAC,KAAA,UAAqBrB,KAAK,SAAAsB,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCDDU,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH9C,EAAAC,EAAAC,cAACF,EAAAC,EAAM8C,WAAP,KACE/C,EAAAC,EAAAC,cAAC8C,EAAD,QAOJjB","file":"static/js/main.1bc4a3b0.chunk.js","sourcesContent":["import React, { useState } from \"react\"\n\nconst api = {\n  key: \"ec7941514077b8004f8f8e33fcf91ea0\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n\n  const search = evt => {\n    if (evt.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result);\n          setQuery('');\n        });\n    }\n  }\n\n  const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day}, ${month} ${day}, ${year}`\n  }\n\n  let fahrenheit = Math.round((weather.main.temp * 1.8) + 32)\n\n  return (\n    <div className={(typeof weather.main != \"undefined\") ? ((weather.main.temp > 16) ? 'app warm' : 'app') : 'app'}>\n      <main>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search...\"\n            onChange={e => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}\n          />\n        </div>\n\n        {(typeof weather.main != \"undefined\") ? (\n          <div>\n            <div className=\"location-box\">\n              <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n              <div className=\"date\">{dateBuilder(new Date())}</div>\n            </div>\n\n            <div className=\"weather-box\">\n              <div className=\"temp\">{fahrenheit}Â°F</div>\n              <div className=\"weather\">{weather.weather[0].main}</div>\n            </div>\n          </div>\n        ) : ('')}\n\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}